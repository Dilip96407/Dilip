/* Generated By:JavaCC: Do not edit this line. Parser.java */
package de.westlb.mgb.client.mail.parser;

import java.io.StringReader;
import java.util.Map;

import org.apache.log4j.Logger;

@SuppressWarnings("rawtypes")
public class Parser implements ParserConstants {

    static Logger logger = Logger.getLogger(Parser.class.getName());

    public static String parseTemplate(String template, Map parameterMap) throws ParseException, TokenMgrError {
        Parser parser = new Parser(new StringReader(template));
        String val = parser.Start(parameterMap);
        logger.debug(val);
        return val;
    }

    final public String Start(Map parameters) throws ParseException {
        String s;
        s = TText(parameters);
        jj_consume_token(0);
        return s;
    }

    final public String TText(Map parameters) throws ParseException {
        String s;
        String value = "";
        label_1: while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case VAR:
            case IF:
            case TEXT:
                ;
                break;
            default:
                jj_la1[0] = jj_gen;
                break label_1;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case VAR:
                s = Variable(parameters);
                value += s;
                break;
            case IF:
                s = ConditionalText(parameters);
                value += s;
                break;
            case TEXT:
                s = ConstantText();
                value += s;
                break;
            default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        return value;
    }

    final public String Variable(Map parameters) throws ParseException {
        Token t;
        t = jj_consume_token(VAR);
        String varName = t.image;
        varName = varName.substring(5, varName.length() - 1);
        Object value = parameters.get(varName);
        return value == null ? "" : value.toString();
    }

    final public String ConditionalText(Map parameters) throws ParseException {
        Token t;
        String s;
        t = jj_consume_token(IF);
        s = TText(parameters);
        jj_consume_token(ENDIF);
        String varName = t.image;
        varName = varName.substring(4, varName.length() - 1);

        Object value = parameters.get(varName);
        if (value instanceof Boolean && Boolean.TRUE.equals(value)) { return s; }
        return "";
    }

    final public String ConstantText() throws ParseException {
        Token t;
        t = jj_consume_token(TEXT);
        return t.image;
    }

    final public String ParamName() throws ParseException {
        Token t;
        t = jj_consume_token(TEXT);
        return t.image;
    }

    public ParserTokenManager token_source;

    SimpleCharStream jj_input_stream;

    public Token token, jj_nt;

    private int jj_ntk;

    private int jj_gen;

    final private int[] jj_la1 = new int[2];

    static private int[] jj_la1_0;
    static {
        jj_la1_0();
    }

    private static void jj_la1_0() {
        jj_la1_0 = new int[] { 0x1c0, 0x1c0,};
    }

    public Parser(java.io.InputStream stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new ParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 2; i++)
            jj_la1[i] = -1;
    }

    public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 2; i++)
            jj_la1[i] = -1;
    }

    public Parser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new ParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 2; i++)
            jj_la1[i] = -1;
    }

    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 2; i++)
            jj_la1[i] = -1;
    }

    public Parser(ParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 2; i++)
            jj_la1[i] = -1;
    }

    public void ReInit(ParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 2; i++)
            jj_la1[i] = -1;
    }

    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    final private int jj_ntk() {
        if ((jj_nt = token.next) == null) return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        return (jj_ntk = jj_nt.kind);
    }

    private java.util.Vector jj_expentries = new java.util.Vector();

    private int[] jj_expentry;

    private int jj_kind = -1;

    @SuppressWarnings("unchecked")
    public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[9];
        for (int i = 0; i < 9; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 2; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 9; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

}
